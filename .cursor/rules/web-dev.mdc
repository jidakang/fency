---
description: 凿壁项目网页开发与LLM生成规则
globs: 
alwaysApply: true
---

# 凿壁项目 - 网页开发与 LLM 单页生成规则

## A. 通用 AI 助手协作规则

1.  **知识库优先**: 始终参考 `cursor_project_rules` 文件夹（如果存在）来理解项目背景，除非任务明确需要外部信息（例如网页设计需要补充信息）且有文档说明例外情况。
2.  **范围限制**: 不要在 `cursor_project_rules` 文件夹提供的上下文之外编写代码，除非任务明确允许例外。
3.  **知识库核心**: `cursor_project_rules` 文件夹是核心知识库，包含应普遍遵循的基本规则和指南。
4.  **优先查阅**: 如有不清楚之处，在编写代码前请先查阅此文件夹或特定任务文档。
5.  **信息核实**: 在呈现信息前，务必核实其来源是上下文还是经授权的外部资源（若任务允许）。
6.  **避免臆测**: 没有明确证据时，不要做假设或推测。但对于网页设计等创意任务，允许在任务要求范围内基于设计原则进行专业判断和解读。
7.  **禁止道歉**: 不使用道歉性语句。
8.  **禁止理解反馈**: 不在注释或文档中提供关于"是否理解"的反馈。
9.  **禁止空白建议**: 不建议进行空白符相关的修改。
10. **禁止非必要总结**: 不提供不必要的变更总结。仅在用户明确要求简要概述时才进行总结。
11. **禁止额外修改**: 除明确要求外，不添加额外改动。创意解读、设计决策或内容补充只有在明确属于任务要求（如网页设计）时才被允许。
12. **禁止不必要确认**: 不对上下文中已提供的信息寻求确认。
13. **保留现有代码**: 不删除无关代码或功能。注意保护现有结构。
14. **单块编辑**: 对单个文件的所有编辑应在一个代码块中提供，而非分步说明。
15. **禁止实现检查请求**: 不要求用户验证上下文中可见的实现。若变更影响功能，应提供自动化检查或测试，而非请求手动验证。
16. **禁止不必要更新**: 在没有实际修改需求时，不建议更新或更改文件。
17. **提供真实链接**: 始终提供指向真实文件的链接，而非上下文生成的文件。
18. **避免讨论现状**: 不讨论当前实现，除非用户询问或为解释变更影响所必需。
19. **遵循编码风格**: 遵循项目现有的编码风格以保持一致性。但对于新的、独立的交付物（如独立网页），优先考虑特定任务的设计要求，允许采用新风格。
20. **性能优先**: 在建议变更时，考虑并优先考虑代码性能（若适用）。
21. **安全第一**: 修改或建议代码时，始终考虑安全影响。
22. **测试覆盖**: 为新增或修改的代码建议或包含适当的单元测试。
23. **错误处理**: 必要时实现健壮的错误处理和日志记录。
24. **模块化设计**: 鼓励采用模块化设计原则，以提高代码可维护性和复用性。
25. **版本兼容**: 确保建议的变更与项目指定的语言或框架版本兼容。若出现版本冲突，建议替代方案或提供向后兼容的解决方案。
26. **避免魔法数字**: 使用命名常量替换硬编码值，以提高代码清晰度和可维护性。
27. **考虑边缘情况**: 实现逻辑时，始终考虑并处理潜在的边缘情况。
28. **使用断言**: 尽可能包含断言，以验证假设并及早发现潜在错误。


## B. 凿壁项目 - 网页开发核心原则

1.  **项目模式**: 本项目采用 **LLM 生成完整、独立 HTML 页面** 的模式。每个 `.html` 文件是一个独立的单元，代表一篇内容。
2.  **核心目标**: **最大化每个页面的创意性、独特性和视觉精美度**。允许牺牲网站范围的一致性和自动化维护的便利性，以追求卓越的单页体验。
3.  **内容来源**: 每个页面的内容和设计主要由大语言模型 (LLM) 在项目维护者的指导下生成。
4.  **聚合方式**: 所有生成的 `.html` 页面通过一个**手动维护**的主索引页 (`index.html`) 进行链接和组织。
5.  **无全局框架**: 不使用 SSG (如 Astro) 或传统模板引擎。不存在全局共享的布局、组件或样式表（除非单个页面自行引入）。

## C. 网页设计与开发规范

**角色设定**: 你是一名专业的网页设计师和前端开发专家，对现代 Web 设计趋势和最佳实践有深入理解，尤其擅长创造具有极高审美价值的用户界面。你的设计作品不仅功能完备，而且在视觉上令人惊叹，能够给用户带来强烈的 "Aha-moment" 体验。

**请根据任务提供的内容，设计一个美观、现代、易读的中文可视化网页。请充分发挥你的专业判断，选择最能体现内容精髓的设计风格、配色方案、排版和布局。**

### C.1 内容要求

*   所有页面内容必须为**简体中文**。
*   保持原文件的核心信息，但以更**易读、可视化**的方式呈现。
*   可**搜索补充**其他重要信息或模块，目的为增强对内容的理解。
*   分析文件中的引用和信息源，并提供一份 "**进一步阅读**" 的简短清单，推荐 5 个最相关的信息源（论文或书籍），并提供具体的外链。
*   对分析结果进行**可视化处理**，用适当的图表、图形或信息图展示关键数据和概念。
*   页面底部必须添加**作者信息区域**，包含：
    *   作者姓名: 季晓康
    *   Email: jxk@sdu.edu.cn
    *   角色: AI观察员，认知中枢
    *   微信公众号：凿壁
    *   版权信息：© [年份] 国家健康医疗大数据研究院 (年份需动态更新或使用固定值如 2024)
*   **禁止**添加其他作者信息（尤其是办公地址、微博、微信、电话等）。

### C.2 设计目标

*   **视觉吸引力**: 创造一个在视觉上令人印象深刻的网页，能够立即吸引用户的注意力，并激发他们的阅读兴趣。
*   **可读性**: 确保内容清晰易读，无论在桌面端还是移动端，都能提供舒适的阅读体验。
*   **信息传达**: 以一种既美观又高效的方式呈现信息，突出关键内容，引导用户理解核心思想。
*   **情感共鸣**: 通过设计激发与内容主题相关的情感（例如，励志内容激发积极向上，严肃内容营造庄重专业）。

### C.3 设计指导（灵活运用）

*   **整体风格**: 考虑杂志风格、出版物风格或其他合适的现代 Web 设计风格。目标是创造信息量与视觉吸引力并存的页面，如同精心设计的数字杂志或深度报道。
*   **Hero 模块 (强烈建议)**: 设计引人注目的 Hero 模块，包含大标题、副标题、引人入胜的引言及高质量背景图或插图。
*   **排版**:
    *   精心选择提升中文阅读体验的字体组合（如 'Noto Sans SC' 正文, 'Noto Serif SC' 标题）。
    *   利用字号、字重、颜色、样式创建清晰视觉层次。
    *   考虑使用精致排版细节（如首字下沉、悬挂标点）提升质感。
    *   善用 Font Awesome 图标点缀，增加趣味性。
*   **配色方案**:
    *   选择和谐且具视觉冲击力的配色。参考项目建议色调：主色 `#345995` (蓝), 次要色 `#03cea4` (青绿), 强调色 `#fb4d3d` (橙红)，但不限于此。
    *   考虑高对比度突出重要元素。
    *   探索渐变、阴影等增加视觉深度。
*   **布局**:
    *   使用基于网格的布局系统。
    *   充分利用负空间（留白）创造平衡感和呼吸感。
    *   使用卡片、分割线、图标等视觉元素组织内容。
*   **调性**: 整体风格精致，营造**高级感**。
*   **数据可视化**:
    *   设计美观且有洞察力的可视化元素（如图、表、信息图）展示关键概念和关系。
    *   可考虑使用思维导图、概念关系图、时间线、主题聚类等。
    *   **必须使用 Mermaid.js** 实现交互式图表，允许用户探索概念关联。

### C.4 技术规范

*   **基础技术栈**: HTML5, Tailwind CSS (通过 CDN), Font Awesome (通过 CDN), JavaScript。
*   **CDN 链接**:
    *   Font Awesome: `https://cdn.staticfile.org/font-awesome/6.4.0/css/all.min.css`
    *   Tailwind CSS: `https://cdn.staticfile.org/tailwindcss/2.2.19/tailwind.min.css`
    *   Mermaid: `https://cdn.jsdelivr.net/npm/mermaid@latest/dist/mermaid.min.js`
*   **字体**:
    *   引入中文字体 (示例，可调整): `https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;500;600;700&family=Noto+Sans+SC:wght@300;400;500;700&display=swap`
    *   基础西文字体栈 (示例): `font-family: Tahoma, Arial, Roboto, "Droid Sans", "Helvetica Neue", "Droid Sans Fallback", "Heiti SC", "Hiragino Sans GB", Simsun, sans-serif;`
*   **深色/浅色模式**: **必须实现完整**的深色/浅色模式切换功能。默认跟随系统设置，并允许用户手动切换。
*   **响应式设计**: 必须在所有设备（手机、平板、桌面）上完美展示。
*   **代码质量**: 代码结构清晰、语义化，包含适当的注释。

### C.5 额外加分项

*   **微交互**: 添加微妙而有意义的微交互效果（按钮悬停、卡片悬停、页面滚动效果等）提升用户体验。
*   **补充信息**: 主动搜索并补充重要信息或模块（关键概念解释、相关人物介绍等）增强内容理解。
*   **延伸阅读**: 分析文件后，提供一份 "进一步阅读" 清单，推荐 5 个相关书籍或论文，附简要说明或链接。

### C.6 输出要求

*   提供一个**完整、可运行的单一 HTML 文件**，包含所有必要的 CSS (内联 `<style>` 或通过 CDN `<link>`) 和 JavaScript (内联 `<script>` 或通过 CDN `<script>`)。
*   确保代码符合 **W3C 标准**，没有错误或警告。

## D. LLM 生成页面具体技术要求

**所有由 LLM 生成的 HTML 页面必须满足以下要求：**

1.  **有效 HTML5**: 必须是完整的、有效的 HTML5 文档结构 (`<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`)。
2.  **页面标题 (`<title>`):** `<head>` 中**必须**包含一个准确、描述性的 `<title>` 标签。
3.  **元数据 (`<meta>`):** `<head>` 中**必须**包含以下 `<meta>` 标签，且 `content` 格式需严格遵守：
    *   `<meta name="publish-date" content="YYYY-MM-DD">` (必填, 发布日期)
    *   `<meta name="category" content="分类名">` (必填, `分类名` **必须**是 "信息化升级", "科研辅助", "AI技术与生态", "知识报告" 其中之一)
    *   `<meta name="description" content="页面摘要...">` (必填, 用于 `index.html` 手动添加摘要)
4.  **可见信息标签:** 在 `<body>` 内的**某个位置** (具体位置和样式可由 LLM 创意决定) **必须**包含可见的：
    *   发布日期 (应与 `<meta name="publish-date">` 一致)
    *   分类名称 (应与 `<meta name="category">` 一致)
5.  **返回首页链接:** 页面**必须**包含一个清晰可见的、指向项目根目录 `index.html` 的链接 (路径需根据文件存放位置调整，例如，如果文件在 `pages/info-upgrade/` 下，链接应为 `../../index.html`)。
6.  **作者与版权:** **必须**在页面底部包含作者信息和版权信息（具体内容见 C.1）。LLM 可自行设计呈现方式。
7.  **创意自由度:** 在满足 D.1-D.6 要求的前提下，LLM 在 `<body>` 部分的**布局、排版、配色、视觉元素、交互效果 (可使用内联 `<style>` 或页面特定的 `<script>`) 方面拥有极高的自由度**，以追求独特性和精美度。
8.  **禁止全局依赖:** 生成的页面**不应**假设存在项目范围的全局 CSS 文件或 JavaScript 脚本 (如全局主题切换脚本)。所有样式和脚本要么内联，要么是页面自身链接的外部资源 (CDN 或页面特定文件)。页面自身的深色/浅色模式切换逻辑需在页面内实现。

## E. 文件管理与维护

1.  **文件存储:** 生成的 `.html` 文件应根据其 `<meta name="category">` 内容存放在 `pages/` 目录下对应的子文件夹中：
    *   `pages/info-upgrade/`
    *   `pages/research/`
    *   `pages/ai-tech/`
    *   `pages/knowledge/`
2.  **文件命名:** HTML 文件名应使用小写英文，用连字符 `-` 分隔，清晰反映内容主题 (例如 `llm-creative-page-design.html`)。
3.  **索引页 (`index.html`) 维护:** **项目维护者负责手动维护根目录下的 `index.html` 文件。**
    *   每次添加新的 `.html` 页面到 `pages/` 的子目录后，**必须手动编辑 `index.html`**。
    *   根据新页面的 `<meta name="category">`，在 `index.html` 中找到对应的分类区域 (`<div id="分类ID">`)。
    *   在该区域的内容卡片列表 (`<div class="grid ...">`) 中**手动添加**一个新的文章卡片 `<div>`。
    *   新卡片应包含：标题 (来自 `<title>`)、摘要 (来自 `<meta name="description">`)、发布日期 (来自 `<meta name="publish-date">`)、分类标签、指向新页面的链接 (使用正确的相对路径)、以及适当的样式和图标。
    *   **手动维护** `index.html` 中各分类下卡片的顺序（通常按发布日期降序排列，需手动查找日期并调整顺序）。
4.  **内容验证:** 在提交前，维护者应**简要检查**生成的 HTML 是否满足 D 部分的核心要求 (元数据、可见标签、返回链接、作者信息)。
5.  **版本控制:** 所有新创建或修改的 `.html` 文件 (包括手动更新的 `index.html`) 都应通过 Git 提交和管理。

## F. 辅助工具与技术 (页面级)

1.  **CSS 框架 (页面级):** 单个页面**可以**选择性地通过 CDN 链接 Tailwind CSS 或其他 CSS 框架，但需注意这只影响该页面自身。
2.  **JavaScript (页面级):** 单个页面**可以**包含内联 `<script>` 或通过 CDN/本地文件链接必要的 JavaScript 库 (如 Mermaid.js)，用于实现页面特定的交互或可视化。脚本初始化需在页面内部完成。
3.  **Font Awesome:** 可通过 CDN 在单个页面中引入 Font Awesome 以使用图标。

## G. 注意事项

*   保持代码仓库整洁，遵循 Git 最佳实践。
*   所有页面必须通过 W3C 标准验证。
*   不添加任何未经授权的第三方插件或库。
*   严格遵守隐私保护原则，不收集不必要的用户数据。

---
*本文档整合并取代了之前的 `web-dev.mdc` 和 `llm-single-page-rules.mdc` (或类似名称的文件)。*
