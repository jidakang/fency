# 凿壁项目 - 开发规则 (Astro + Markdown)

## A. 核心架构与原则
1.  **架构:** 本项目采用 **Astro (SSG)** 架构。所有最终页面由 Astro 根据 Markdown 内容和 `.astro` 布局/组件构建生成。
2.  **内容源:** 主要内容存储为 **Markdown 文件 (`.md`)**，位于 `src/content/` 目录下的相应集合中（如 `articles`）。
3.  **元数据:** 每个 Markdown 文件**必须**包含 **YAML Frontmatter**，用于定义页面元数据。**必须**遵循 `src/content/config.ts` 中定义的 **Content Collection Schema**。
4.  **布局与组件:** 页面结构、导航、页脚等通用元素通过 **Astro 布局 (`src/layouts/`)** 和 **组件 (`src/components/`)** 实现，以确保一致性和可维护性。
5.  **样式:** 使用 **Tailwind CSS** 进行样式设计。全局样式和 Tailwind 配置在 `src/styles/global.css` 和 `tailwind.config.cjs` 中定义。
6.  **客户端脚本:** 仅在必要时（如主题切换、移动菜单、Mermaid 初始化）使用 **Vanilla JavaScript**，并尽可能利用 Astro 的选择性加载机制 (Islands)。

## B. 通用开发规则 (改编自原规则)
7.  **知识库:** `cursor_project_rules` 文件夹（特别是本文档）是理解项目背景和规则的主要依据。
8.  **上下文范围:** 编码工作应围绕 Astro 项目结构进行，主要涉及 `.md`, `.astro`, `.css`, `.js/.ts` 文件。
9.  **疑问处理:** 如有不清楚之处，请参考本文档、`docs/prd.md` 或 `docs/architecture.md`。
10. **信息验证:** 在呈现信息之前，务必根据上下文或授权的外部来源（如果任务允许）进行验证。
11. **避免假设:** 不要在没有明确证据的情况下做出假设或推测。但是，对于网页设计等创意任务，在任务需求定义的范围内，允许基于设计原则的专业判断和解释。
12. **禁止道歉:** 切勿使用道歉性语言。
13. **禁止理解反馈:** 避免在注释或文档中提供关于理解情况的反馈。
14. **禁止空白建议:** 不要建议更改空白字符。
15. **禁止总结:** 不要提供不必要的变更总结。仅当用户在变更后明确要求简要概述时才进行总结。
16. **禁止臆造:** 不要添加明确要求之外的变更，除非创意解释、设计决策或内容补充明确属于任务要求的一部分（例如，网页设计）。
17. **禁止不必要确认:** 不要要求确认上下文中已提供的信息。
18. **保留现有代码:** 不要移除不相关的代码或功能。注意保留现有结构。
19. **单块编辑:** 为单个文件提供所有编辑应在单一代码块中完成，而不是使用多步指令或对该文件的解释。
20. **禁止实施检查:** 不要要求用户验证在提供的上下文中可见的实现。但是，如果更改影响功能，应提供自动化检查或测试，而不是要求手动验证。
21. **禁止不必要更新:** 当文件没有实际需要修改时，不要建议更新或更改文件。
22. **提供真实文件链接:** 始终提供指向真实文件的链接，而不是上下文生成的文件。
23. **禁止讨论当前实现:** 除非用户询问或为解释请求更改的影响所必需，否则不要讨论当前的实现。
24. **遵循一致编码风格:** 遵循 Astro 和 Tailwind 的最佳实践以及项目中已有的风格。
25. **优先考虑性能:** 在建议更改时，若适用，应考虑并优先考虑代码性能。
26. **安全第一方法:** 在修改或建议代码更改时，始终考虑安全影响。
27. **测试覆盖:** 适度建议，可考虑为关键组件或 JS 逻辑添加测试。
28. **错误处理:** 在必要时实施健壮的错误处理和日志记录。
29. **模块化设计:** 体现在 Astro 组件设计上。
30. **版本兼容性:** 主要关注 Astro 和 Node.js 版本。
31. **避免魔法数字:** 用命名常量替换硬编码值，以提高代码的清晰度和可维护性。
32. **考虑边缘情况:** 在实现逻辑时，务必考虑并处理潜在的边缘情况。
33. **使用断言:** 尤其在 JS 逻辑中。
34. **语言要求:** 所有对话交互必须使用简体中文。

## C. 内容管理规则
35. **Frontmatter Schema:** **必须** 严格遵守 `src/content/config.ts` 中定义的 Schema。至少包含 `title`, `pubDate`, `category`。推荐填写 `description`, `modDate`, `tags`, `draft`。
36. **日期追踪 (`pubDate`, `modDate`):** Frontmatter 中的日期**必须**使用 `YYYY-MM-DD` 格式。`pubDate` 是必需的，`modDate` 在内容更新时填写。
37. **分类 (`category`):** Frontmatter 中的 `category` **必须** 是 PRD 中定义的四大分类之一 ("信息化升级", "科研辅助", "AI技术与生态", "知识报告")。
38. **内容重复检查:** 在使用 LLM 生成新内容前，应简要检查 `src/content/` 目录下是否已有高度相似主题的文章，考虑更新而非重复创建。
39. **文件命名:** Markdown 文件名应使用小写英文，用连字符 `-` 分隔，清晰反映内容主题 (例如 `llm-in-healthcare-trends.md`)。

## D. Astro 特定规则
40. **组件复用:** 优先创建可复用的 Astro 组件 (`src/components/`) 来处理重复的 UI 模式（如卡片、按钮等）。
41. **布局应用:** 所有页面（通过 `src/pages/` 或动态路由生成）都**必须**应用一个基础布局 (`src/layouts/Layout.astro`) 或特定布局（如 `ArticleLayout.astro`）来确保全局结构一致。
42. **Props 传递:** 组件间的数据传递应通过 `props` 进行，保持单向数据流。
43. **客户端脚本:** 默认情况下组件应为零 JS。仅在需要交互时添加 `<script>` 标签，并考虑使用 Astro 的 `client:` 指令进行优化。

## E. 样式与资源规则
44. **Tailwind 配置:** 颜色（使用更新后的 `#1a3a6d`, `#2a9d8f`, `#e09f3e` 等）、字体 (`Noto Sans SC`, `Noto Serif SC`) 等主题相关的配置应在 `tailwind.config.cjs` 中定义。
45. **全局样式:** 基础 HTML 元素样式、字体加载、CSS 变量定义等应放在 `src/styles/global.css`。
46. **图片资源:** 图片应放置在 `public/` 目录下（如果需要直接访问）或 `src/assets/` 目录下（如果需要 Astro 处理优化）。优先使用 `src/assets/` 并利用 Astro 的图片优化功能。
47. **图标:** 使用 Font Awesome 图标库，通过 CDN 加载（已在布局中处理）。

## F. 辅助功能
48. **Mermaid 集成:** 可在 Markdown 中直接使用 Mermaid 语法。需确保 Mermaid JS 已加载并在客户端初始化（通常在基础布局的脚本中完成）。
49. **主题切换:** 实现逻辑应封装在独立的 JS 文件或 Astro 组件的 `<script>` 块中，通过切换 `<html>` 元素的 `dark` 类和更新 `localStorage` 来工作。

---
*原规则文件中的"角色"、"设计目标"、"技术规范"、"输出要求"等针对单一 HTML 生成的部分已被移除或整合到以上规则中。* 